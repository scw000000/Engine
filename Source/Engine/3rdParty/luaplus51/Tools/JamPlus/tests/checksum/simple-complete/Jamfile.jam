#LUA_SHARED_LIBRARY.DEBUG = s:/luaplus51-all/build2015.lua53-luaplus/bin.lua53-luaplus.vs2015.win32/lua53_debug.dll ;
#JAM_USE_CHECKSUMS = 1 ;

SubDir TOP ;

# To keep things fairly simple, let's use a Lua action to generate a stripped
# version of the source input to GenerateHFile.  Any one-line C-style comments
# found will be removed, and the resultant line will be written to the output
# file. This way, the source input can be modified and commented, but only the
# actual code will show up in the final file.
actions lua GenerateHeader {
    local lines = {}
    for line in io.lines([[$(2)]]) do
        line = line:gsub('//.*', '')
        if line ~= '' then
            lines[#lines + 1] = line .. '\n'
        end
    end
    lines = table.concat(lines)

    local outputFile = io.open([[$(1)]], 'wb')
    outputFile:write(lines)
    outputFile:close()
}

# Fake compile a fake .cs file into a fake .dll with an embedded timestamp to
# make the file change every time, just like a .dll.
actions lua CompileCS {
    local outputFile = io.open([[$(1)]], 'wb')
    outputFile:write('// Generated on ' .. os.date() .. '\n')
    local lines = {}
    for line in io.lines([[$(2)]]) do
        outputFile:write(line .. '\n')
        lines[#lines + 1] = line .. '\n'
    end
    outputFile:close()
}

local test.cs = [ C.GristFiles test : test.cs ] ;
SEARCH on $(test.cs) = $(SEARCH_SOURCE) ;

local test.dll = [ C.GristFiles test : test.dll ] ;
MakeLocate $(test.dll) : $(LOCATE_TARGET) ;
Depends $(test.dll) : $(test.cs) ;
CompileCS $(test.dll) : $(test.cs) ;
Clean clean : $(test.dll) ;

# Assign a target name to the generated header that matches what will be
# generated by HdrRule.
local generatedheader.h = [ C.GristFiles test : generatedheader.h ] ;
MakeLocate $(generatedheader.h) : $(LOCATE_SOURCE) ;
Depends $(generatedheader.h) : $(test.dll) ;
GenerateHeader $(generatedheader.h) : $(test.dll) ;
Clean clean : $(generatedheader.h) ;

C.IncludeDirectories test : $(LOCATE_SOURCE) ;
C.Application test : main.c ;
