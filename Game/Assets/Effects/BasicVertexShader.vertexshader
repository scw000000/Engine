#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 VertexPosition_Modelspace;
layout(location = 1) in vec2 VertexUV;
layout(location = 2) in vec3 VertexNormal_Modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 TotalDiffuseColor;


// Values that stay constant for the whole mesh.
uniform mat4 	MVP;
uniform mat4 	M;

uniform vec3 	LightPosition_WorldSpace[8];
uniform vec3 	LighDirection[8];
uniform vec3	LightDiffuse[8];
uniform vec3   	LightPower[8];
uniform vec3 	LightAmbient;
uniform int     LightNumber;

uniform vec3 	MaterialDiffuse;
uniform vec3	MaterialAmbient;


void main()
	{

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4( VertexPosition_Modelspace, 1 );
	vec3 vertexPosition_Worldspace = ( M * vec4( VertexPosition_Modelspace, 1 ) ).xyz;
	float cos = clamp( normalize( M * VertexNormal_Modelspace ), 0, 1 )
	TotalDiffuseColor = vec3( 0, 0, 0 );
	
	for( int i = 0; i < LightNumber; ++i )
		{
		float dist = distance( vertexPosition_Worldspace, LightPosition_WorldSpace[i] );
		TotalDiffuseColor += LightDiffuse[i] * LightPower[i] * cos / ( dist * dist );
		}
		
	TotalDiffuseColor = MaterialAmbient * LightAmbient + MaterialDiffuse * TotalDiffuseColor;
	
	// UV of the vertex. No special space for this one.
	UV = VertexUV;
	}

